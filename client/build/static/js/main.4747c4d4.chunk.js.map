{"version":3,"sources":["assets/img/myphoto.jpg","components/loginPage.js","components/chatscreen.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","HKloginPage","state","modal","displaySigninOrSignup","document","getElementById","window","onclick","event","target","style","display","getElementsByClassName","type","preventDefault","formElements","elements","postData","i","length","name","value","username","password","undefined","confirmpassword","alert","this","props","fetchUserDetails","setState","react_default","a","createElement","id","className","onSubmit","required","Fragment","color","cursor","onClick","onClickSignInLink","bind","key","gridColumn","onLoginFormSubmit","React","Component","connect","logInState","dispatch","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","loginDetails","catch","err","console","log","ChatScreen","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","WebSocket","MozWebSocket","selectedUser","targetUser","loggedInOnlineStatus","targetUserLoggedInStatus","chatObject","incomingChatObject","addEventListener","sendOnlineStatus","fetchAllUsers","sessionStorage","myChatbotLoggedinUserName","myChatbotLoggedinPassword","myChatbotLoggedinType","nextProps","setupWebsocketConnection","loggingInOnlineState","navigator","onLine","data","_this2","protocol","location","connection","host","onopen","msg","send","onerror","error","onmessage","message","parse","e","String","sourceUser","objectSpread","Array","isArray","push","justifySelf","chatstatement","_id","el","getElementsByTagName","scrollIntoView","which","keyCode","onClickSubmit","chatmessage","concat","_this3","clickedUser","allUsers","find","tagName","defineProperty","filterUsers","fetchFilteredUser","keyword","_this4","src","myImg","alt","onUserClick","map","user","textDecoration","marginLeft","_username","float","marginRight","backgroundColor","filteredUsers","gridRow","alignItems","justifyContent","fontSize","aria-hidden","onLoginIconClick","height","width","borderRadius","border","onClickSearchUser","loginPage","onKeyUp","onSubmitChat","App","chatscreen","Boolean","hostname","match","initialState","reducer","arguments","action","store","createStore","ReactDOM","render","es","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4747c4d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/myphoto.5ebdd676.jpg\";","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass HKloginPage extends React.Component{\r\n\r\n    state={\r\n        modal:true,\r\n        displaySigninOrSignup:true\r\n    }\r\n\r\n    componentDidMount(){\r\n        var modal=document.getElementById(\"loginPage\")\r\n        window.onclick = function(event) {\r\n            if (event.target === modal) {\r\n                modal.style.display = \"none\";\r\n            }\r\n        }\r\n        \r\n        var span= document.getElementsByClassName(\"close\");\r\n        span[0].onclick=function(){\r\n            modal.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    onLoginFormSubmit(type,event){\r\n        event.preventDefault();\r\n        var formElements=document.getElementById(\"loginForm\").elements;    \r\n        var postData={};\r\n        postData[\"type\"]=type;\r\n        for (var i=0; i<formElements.length; i++)\r\n            if (formElements[i].type!==\"submit\" && formElements[i].type!==\"button\"){//we dont want to include the submit-buttom\r\n                postData[formElements[i].name]=formElements[i].value;\r\n            }\r\n        \r\n        if(!postData.username || !postData.password){\r\n            alert(\"Please enter username and password\")\r\n        }else if(postData.confirmpassword !==undefined && postData.password !==postData.confirmpassword){\r\n            alert(\"password mismatch\");\r\n        }else{\r\n            this.props.fetchUserDetails(postData);\r\n            document.getElementById(\"loginPage\").style.display=\"none\"\r\n        }\r\n    }\r\n\r\n    onClickSignInLink(){\r\n        this.setState({\r\n            displaySigninOrSignup:!this.state.displaySigninOrSignup\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"loginPage\">\r\n                <div id=\"modal\" style={{display:this.state.modal?\"grid\":\"none\"}}>\r\n                    <span className=\"close\">&times;</span>\r\n                    {/* <p>HK Login Page !!!!</p> */}\r\n                    \r\n                        <form id=\"loginForm\" /* method=\"post\" action=\"/loginUser\" */ onSubmit={(event)=>{event.preventDefault()}}>\r\n                            <label>username : </label><input type=\"text\" name=\"username\" required={true}></input>\r\n                            <label>password : </label><input type=\"text\" name=\"password\" required={true}></input>\r\n                            {\r\n                            this.state.displaySigninOrSignup?\r\n                            <React.Fragment>\r\n                                <u style={{color:\"blue\",cursor:\"pointer\"}} onClick={this.onClickSignInLink.bind(this)}>Sign up</u>\r\n                                <input type=\"submit\" value=\"Login\" key=\"loginbutton\" style={{gridColumn:\"2/3\"}} onClick={this.onLoginFormSubmit.bind(this,\"signin\")}></input>\r\n                            </React.Fragment>\r\n                            :\r\n                            <React.Fragment>\r\n                                <label>confirm password : </label><input type=\"text\" key=\"confirmpassword\" name=\"confirmpassword\"></input>\r\n                                <label>passcode : </label><input type=\"text\" key=\"passcode\" name=\"passcode\"></input>\r\n                                <u style={{color:\"blue\",cursor:\"pointer\"}} onClick={this.onClickSignInLink.bind(this)}>Sign in</u>\r\n                                <input type=\"submit\" value=\"signup\" key=\"signupbutton\" style={{gridColumn:\"2/3\"}} onClick={this.onLoginFormSubmit.bind(this,\"signup\")}></input>\r\n                            </React.Fragment>\r\n                            }\r\n                        </form> \r\n                </div>\r\n                    {/* <p>HK Login Page !!!!</p> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps =(state)=>{\r\n    return{\r\n      logInState:state.logInState,\r\n      username:state.username\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return {\r\n      fetchUserDetails:(postData)=>{\r\n        fetch(\"/loginUser\",{\r\n        //fetch(\"http://localhost:8081/loginUser\",{\r\n            method:\"POST\",\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n              },\r\n            body:JSON.stringify(postData)\r\n        }).then(res=>res.json()).then((res)=>{\r\n            dispatch({type:\"FETCH_USER\",value:res,loginDetails:postData})\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n        })\r\n      }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(HKloginPage);","import React from \"react\";\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport HKloginPage from \"./loginPage\";\r\nimport {connect} from \"react-redux\";\r\nimport myImg from \"../assets/img/myphoto.jpg\";\r\nimport \"../assets/css/stylesheet.css\"\r\n\r\nclass ChatScreen extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        // if user is running mozilla then use it's built-in WebSocket\r\n        window.WebSocket = window.WebSocket || window.MozWebSocket;\r\n        this.state={\r\n            selectedUser:\"\",\r\n            targetUser:null,\r\n            loggedInOnlineStatus:false,\r\n            targetUserLoggedInStatus:false,\r\n            chatObject:{},\r\n            incomingChatObject:{}\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        window.addEventListener(\"online\",this.sendOnlineStatus.bind(this));\r\n        window.addEventListener(\"offline\",this.sendOnlineStatus.bind(this));\r\n        this.props.fetchAllUsers();\r\n        if(sessionStorage.myChatbotLoggedinUserName && sessionStorage.myChatbotLoggedinPassword && sessionStorage.myChatbotLoggedinType){\r\n            this.props.fetchUserDetails({\r\n                username:sessionStorage.myChatbotLoggedinUserName,\r\n                password:sessionStorage.myChatbotLoggedinPassword,\r\n                type:sessionStorage.myChatbotLoggedinType\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.id!==this.props.id){\r\n            this.setupWebsocketConnection(JSON.stringify({type:\"sendLoginId\",id:nextProps.id,loggingInOnlineState:navigator.onLine}))\r\n        }\r\n        if(nextProps.username!==\"unauthorized user\" && nextProps.username){\r\n            this.setState({\r\n                loggedInOnlineStatus:navigator.onLine\r\n            })\r\n        }\r\n    }\r\n\r\n    setupWebsocketConnection(data){\r\n        let protocol=window.location.protocol;\r\n        if(protocol===\"https:\"){\r\n            this.connection=new WebSocket('wss://'+window.location.host+'/echo');\r\n        }else if(protocol===\"http:\"){\r\n            this.connection=new WebSocket('ws://'+window.location.host+'/echo');\r\n        }\r\n        //this.connection=new WebSocket('ws://localhost:8081/echo');\r\n        this.connection.onopen =  (msg)=> {\r\n            // this.connection is opened and ready to use;\r\n            this.connection.send(data);\r\n        };\r\n\r\n        this.connection.onerror = function (error) {\r\n            // an error occurred when sending/receiving data\r\n            console.log(error)\r\n        };\r\n\r\n        this.connection.onmessage =  (message)=> {\r\n            // try to decode json (I assume that each message\r\n            // from server is json)\r\n            try {\r\n                var json = JSON.parse(message.data);\r\n            } catch (e) {\r\n            console.log('This doesn\\'t look like a valid JSON: ',\r\n                message.data);\r\n            return;\r\n            }\r\n            // handle incoming message\r\n            //console.log(json);\r\n            if(json.type===\"sendMessage\"){\r\n                var a=String(json.targetUser) +String(json.sourceUser)\r\n                var chatObject={...this.state.chatObject};\r\n                var incomingChatObject={...this.state.incomingChatObject};\r\n                if(Array.isArray( chatObject[a])){\r\n                    chatObject[a].push(<p key={chatObject[a].length+1} style={{justifySelf:\"left\"}}>{json.chatstatement}</p>);\r\n                    \r\n                }else{\r\n                    chatObject[a]=[<p key={1} style={{justifySelf:\"left\"}}>{json.chatstatement}</p>];\r\n                };\r\n                console.log(this.state.selectedUser._id,String(json.sourceUser))\r\n                if(Array.isArray( incomingChatObject[a]) && this.state.selectedUser._id!==String(json.sourceUser)){\r\n                    incomingChatObject[a].push(<p key={chatObject[a].length+1} style={{justifySelf:\"left\"}}>{json.chatstatement}</p>);\r\n                }else if(this.state.selectedUser._id!==String(json.sourceUser)){\r\n                    incomingChatObject[a]=[<p key={chatObject[a].length+1} style={{justifySelf:\"left\"}}>{json.chatstatement}</p>]\r\n                }\r\n                this.setState({\r\n                    chatObject:chatObject,\r\n                    incomingChatObject:incomingChatObject\r\n                }, ()=>{\r\n                    var el=document.getElementById(\"chatArea\").getElementsByTagName(\"p\");\r\n                    el[el.length-1].scrollIntoView();\r\n                })\r\n            }else if(json.type===\"checkOnlineStatus\"){\r\n                this.setState({\r\n                    targetUserLoggedInStatus:json.targetUserLoggedInStatus\r\n                })\r\n            }\r\n        };\r\n    }\r\n\r\n    sendOnlineStatus(){\r\n        this.setState({\r\n            loggedInOnlineStatus:navigator.onLine\r\n        })\r\n    }\r\n\r\n    onSubmitChat(event){\r\n        var x= event.which || event.keyCode;\r\n        if(x===13){\r\n            this.onClickSubmit.bind(this)()\r\n        }\r\n    }\r\n\r\n    onClickSubmit(){\r\n        if(this.props.username!==\"unauthorized user\" && this.props.username && this.state.selectedUser && document.getElementById(\"chatInput\").value){\r\n            this.connection.send(JSON.stringify({\r\n                type:\"sendMessage\",\r\n                chatmessage:'HK',\r\n                chatstatement:document.getElementById(\"chatInput\").value,\r\n                sourceUser:this.props.id,\r\n                targetUser:this.state.targetUser\r\n            }));\r\n            var a=String(this.props.id) +String(this.state.targetUser);\r\n            var chatObject={...this.state.chatObject};\r\n            if(Array.isArray( chatObject[a])){\r\n                chatObject[a].push(<p style={{justifySelf:\"right\"}} key={this.state.chatObject[a].length+1}>{document.getElementById(\"chatInput\").value}</p>);\r\n                \r\n            }else{\r\n                chatObject[a]=[<p style={{justifySelf:\"right\"}} key={1}>{document.getElementById(\"chatInput\").value}</p>]\r\n            }\r\n            this.setState({\r\n                chatObject:chatObject\r\n            }, ()=>{\r\n                var el=document.getElementById(\"chatArea\").getElementsByTagName(\"p\");\r\n                el[el.length-1].scrollIntoView();\r\n            })\r\n            \r\n            document.getElementById(\"chatInput\").value=\"\";\r\n        }else{\r\n            alert(\"User is \"+this.props.username +` and chatting with ${this.state.selectedUser}`)\r\n        }\r\n    }\r\n\r\n    onLoginIconClick(){\r\n        document.getElementById(\"loginPage\").style.display=\"block\"\r\n    }\r\n\r\n    onUserClick(event){\r\n        var clickedUser=this.props.allUsers.find((a)=>{return a._id===event.target.id});\r\n        if(event.target.tagName===\"SPAN\" || event.target.tagName===\"P\"){\r\n            this.setState({\r\n                selectedUser:clickedUser,\r\n                targetUser:event.target.id,\r\n                incomingChatObject:{\r\n                    ...this.state.incomingChatObject,\r\n                    [String(this.props.id)+String(clickedUser._id)]:undefined\r\n                }\r\n            },\r\n            ()=>{\r\n                if(this.connection){\r\n                    this.connection.send(JSON.stringify({\r\n                        type:\"checkOnlineStatus\",\r\n                        targetUser:this.state.targetUser,\r\n                        sourceUser:this.props.id\r\n                    }))\r\n                }\r\n            });\r\n        }\r\n         \r\n    }\r\n\r\n    onClickSearchUser(){\r\n        var filterUsers=document.getElementById(\"filterUsers\").value;\r\n        if(filterUsers){\r\n            this.props.fetchFilteredUser({\r\n                keyword: filterUsers\r\n            })\r\n        }else{\r\n            alert(\"please enter a keyword\")\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <header>\r\n                    <div id=\"imgDiv\">\r\n                        <img src={myImg} alt=\"Vivek_pic\"></img>\r\n                    </div>\r\n                    <span id=\"appDescription\">Simple ChatBot<br/> <span>By</span><br/> Vivek Kumar Singh</span>\r\n                    {this.props.username!==\"unauthorized user\" && this.props.username?<div id=\"mobileviewUL\" onClick={this.onUserClick.bind(this)}>\r\n                        {\r\n                            this.props.allUsers?this.props.allUsers.map((user)=>{\r\n                                return <span key={user._id} id={user._id} style={{cursor:\"pointer\",textDecoration:\"underline\",color:\"blue\",marginLeft:\"8px\"}}>{user._username} <span style={{float:\"right\",marginRight:\"8%\"}}>{this.state.incomingChatObject[String(this.props.id)+String(user._id)]?this.state.incomingChatObject[String(this.props.id)+String(user._id)].length:\"\"}</span></span>\r\n                            }):\"\"\r\n                        }\r\n                        <h4 style={{backgroundColor:\"yellow\"}}>\r\n                            Search results\r\n                        </h4>\r\n                        {\r\n                            this.props.filteredUsers?this.props.filteredUsers.map((user)=>{\r\n                                return <span key={user._id} id={user._id} style={{cursor:\"pointer\",textDecoration:\"underline\",color:\"blue\"}}>{user._username} <span style={{float:\"right\",marginRight:\"8%\"}}>{this.state.incomingChatObject[String(this.props.id)+String(user._id)]?this.state.incomingChatObject[String(this.props.id)+String(user._id)].length:\"\"}</span></span>\r\n                            }):\"\"\r\n                        }\r\n                    </div>:\"\"}\r\n                    <span style={{gridRow:\"1/2\",gridColumn:\"3/4\",display:\"flex\",alignItems:\"center\",justifyContent:\"center\",backgroundColor:\"yellowgreen\"}}>\r\n                        <span style={{fontSize:\"24px\",color:\"blue\",marginRight:\"16px\",cursor:\"pointer\"}} className =\"fa fa-user\" aria-hidden=\"true\" onClick={this.onLoginIconClick.bind(this)}>\r\n\r\n                        </span>\r\n                    {\r\n                        this.props.username!==\"unauthorized user\" && this.props.username ?\r\n                        <React.Fragment><span>{this.props.username}</span><div style={{height:\"8px\",width:\"8px\",borderRadius:\"50%\",backgroundColor:this.state.loggedInOnlineStatus?\"green\":\"red\"}}></div></React.Fragment>:\r\n                        <span style={{cursor:\"pointer\"}} onClick={this.onLoginIconClick.bind(this)}>Login</span>\r\n                    }\r\n                    </span>\r\n                    <input id=\"filterUsers\" style={{gridRow:\"2/3\",gridColumn:\"3/4\"}}></input>\r\n                    <span id=\"selectedUser\">\r\n                        <span>{this.state.selectedUser._username}</span>{this.state.selectedUser?<div style={{height:\"8px\",width:\"8px\",backgroundColor:this.state.targetUserLoggedInStatus?\"green\":\"red\",borderRadius:\"50%\"}}></div>:\"\"}\r\n                    </span>\r\n                    <button style={{gridRow:\"3/4\",gridColumn:\"3/4\",border:\"1px solid blue\"}} onClick={this.onClickSearchUser.bind(this)}>Search</button>\r\n                </header>\r\n                {this.props.username!==\"unauthorized user\" && this.props.username?<div id=\"userList\" onClick={this.onUserClick.bind(this)}>\r\n                    {\r\n                        this.props.allUsers?this.props.allUsers.map((user)=>{\r\n                            return <p key={user._id} id={user._id} style={{cursor:\"pointer\",textDecoration:\"underline\",color:\"blue\"}}>{user._username} <span style={{float:\"right\",marginRight:\"8%\"}}>{this.state.incomingChatObject[String(this.props.id)+String(user._id)]?this.state.incomingChatObject[String(this.props.id)+String(user._id)].length:\"\"}</span></p>\r\n                        }):\"\"\r\n                    }\r\n                        <h4 style={{backgroundColor:\"yellow\"}}>\r\n                            Search results\r\n                        </h4>\r\n                        {\r\n                            this.props.filteredUsers?this.props.filteredUsers.map((user)=>{\r\n                                return <p key={user._id} id={user._id} style={{cursor:\"pointer\",textDecoration:\"underline\",color:\"blue\"}}>{user._username} <span style={{float:\"right\",marginRight:\"8%\"}}>{this.state.incomingChatObject[String(this.props.id)+String(user._id)]?this.state.incomingChatObject[String(this.props.id)+String(user._id)].length:\"\"}</span></p>\r\n                            }):\"\"\r\n                        }\r\n                </div>:\"\"}\r\n                <HKloginPage></HKloginPage>\r\n                <div id=\"chatArea\">\r\n                    {this.state.chatObject[String(this.props.id)+String(this.state.targetUser)]?\r\n                        this.state.chatObject[String(this.props.id)+String(this.state.targetUser)]:\"\"}\r\n                </div>\r\n                <div style={{display:\"flex\",alignItems:\"center\",border:\"1px solid blue\",gridRow:\"3/3\",backgroundColor:\"blue\"}}>\r\n                    <input id=\"chatInput\" onKeyUp={this.onSubmitChat.bind(this)}/>\r\n                    <span style={{height:\"100%\",cursor:\"pointer\",width:\"4%\",fontSize:\"21px\"}} onClick={this.onClickSubmit.bind(this)}>&#10148;</span>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps =(state)=>{\r\n    return{\r\n      logInState:state.logInState,\r\n      username:state.username,\r\n      allUsers:state.allUsers,\r\n      id:state.id,\r\n      filteredUsers:state.filteredUsers\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return {\r\n        fetchAllUsers:()=>{\r\n            fetch(\"/fetchAllUsers\").then((res)=>res.json()).then((res)=>{\r\n            //fetch(\"http://localhost:8081/fetchAllUsers\").then((res)=>res.json()).then((res)=>{\r\n                dispatch({type:\"FETCH_ALLUSERS\",value:res})\r\n            })\r\n        },\r\n        fetchUserDetails:(postData)=>{\r\n            fetch(\"/loginUser\",{\r\n            //fetch(\"http://localhost:8081/loginUser\",{\r\n                method:\"POST\",\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                body:JSON.stringify(postData)\r\n            }).then(res=>res.json()).then((res)=>{\r\n                dispatch({type:\"FETCH_USER\",value:res,loginDetails:postData})\r\n            }).catch((err)=>{\r\n                console.log(err)\r\n            })\r\n        },\r\n        fetchFilteredUser:(postData)=>{\r\n            fetch(\"/fetchSpecificUser\",{\r\n                //fetch(\"http://localhost:8081/loginUser\",{\r\n                    method:\"POST\",\r\n                    headers:{\r\n                        'Content-Type': 'application/json'\r\n                      },\r\n                    body:JSON.stringify(postData)\r\n                }).then(res=>res.json()).then((res)=>{\r\n                    console.log(res)\r\n                    dispatch({type:\"FETCH_FILTERED_USER\",value:res});\r\n                }).catch((err)=>{\r\n                    console.log(err)\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChatScreen);","import React, { Component } from 'react';\r\n\r\nimport ChatScreen from \"./components/chatscreen\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ChatScreen></ChatScreen>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initialState={\r\n        logInState:false,\r\n        username:null,\r\n        allUsers:[],\r\n        id:null\r\n}\r\n\r\n/* var setupWebsocketConnection=function(data){\r\n    if(initialState.connection){\r\n        initialState.connection.close(initialState.username);\r\n        //return;\r\n    }\r\n    initialState.connection=new WebSocket('ws://127.0.0.1:8081/echo');\r\n    initialState.connection.onopen =  (msg)=> {\r\n        // this.connection is opened and ready to use;\r\n        initialState.connection.send(JSON.stringify(data));\r\n        //console.log(msg)\r\n    };\r\n\r\n    initialState.connection.onerror = function (error) {\r\n        // an error occurred when sending/receiving data\r\n        console.log(error)\r\n    };\r\n\r\n    initialState.connection.onmessage = function (message) {\r\n        // try to decode json (I assume that each message\r\n        // from server is json)\r\n        try {\r\n            console.log(message.data)\r\n        var json = JSON.parse(message.data);\r\n        } catch (e) {\r\n        console.log('This doesn\\'t look like a valid JSON: ',\r\n            message.data);\r\n        return;\r\n        }\r\n        // handle incoming message\r\n        console.log(json)\r\n    };\r\n} */\r\n\r\nconst reducer=(state=initialState,action)=>{\r\n    if(action.type===\"FETCH_USER\"){\r\n        //setupWebsocketConnection(action.value);\r\n        sessionStorage[\"myChatbotLoggedinUserName\"]=action.loginDetails.username;\r\n        sessionStorage[\"myChatbotLoggedinPassword\"]=action.loginDetails.password;\r\n        sessionStorage[\"myChatbotLoggedinType\"]=\"signin\";\r\n        return {\r\n            ...state,\r\n            logInState:action.value.logInState,\r\n            username:action.value.username,\r\n            id:action.value.id\r\n        }\r\n    }\r\n    if(action.type===\"FETCH_ALLUSERS\"){\r\n        return{\r\n            ...state,\r\n            allUsers:action.value\r\n        }\r\n    }\r\n    if(action.type===\"FETCH_FILTERED_USER\"){\r\n        console.log(action.value)\r\n        return{\r\n            ...state,\r\n            filteredUsers:action.value\r\n        }\r\n    }\r\n    return{...state}\r\n}\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {createStore} from \"redux\";\r\nimport reducer from \"./store/reducer\"\r\n\r\nconst store=createStore(reducer);\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}